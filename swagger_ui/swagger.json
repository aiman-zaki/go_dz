{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "DZ API.",
    "version": "0.0.1"
  },
  "host": "localhost:8181",
  "basePath": "/api/",
  "paths": {
    "/auth/login": {
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "operationId": "authLogin",
        "parameters": [
          {
            "name": "Auth",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Auth"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/validCredential"
          },
          "401": {
            "$ref": "#/responses/invalidCredential"
          },
          "404": {
            "$ref": "#/responses/errorNotFound"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Register",
        "operationId": "authRegister",
        "parameters": [
          {
            "name": "Auth",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Auth"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/validCredential"
          },
          "422": {
            "$ref": "#/responses/dataAlreadyExisted"
          }
        }
      }
    },
    "/branches": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Branches"
        ],
        "summary": "Get all Branches.",
        "operationId": "getBranches",
        "responses": {
          "200": {
            "$ref": "#/responses/branches"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Branches"
        ],
        "summary": "Create a Branch.",
        "operationId": "createBranch",
        "parameters": [
          {
            "name": "Branch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/branch"
          }
        }
      }
    },
    "/branches/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Branches"
        ],
        "summary": "Get a Branch by Id.",
        "operationId": "getBranchById",
        "responses": {
          "200": {
            "$ref": "#/responses/branches"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Branches"
        ],
        "summary": "Update a Branches.",
        "operationId": "updateBranchById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/branch"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Branches"
        ],
        "summary": "Delete a Branch by Id.",
        "operationId": "deleteBranchById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/branch"
          }
        }
      }
    },
    "/configuration/stock-statuses": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Configuration_StockStatus"
        ],
        "summary": "Get all StockStatus",
        "operationId": "getAllStockStatuses",
        "responses": {
          "200": {
            "$ref": "#/responses/stockStatuses"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Configuration_StockStatus"
        ],
        "summary": "Create a StockStatus",
        "operationId": "createStockStatus",
        "parameters": [
          {
            "x-go-name": "StockStatus",
            "name": "stock_status",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StockType"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/stockStatus"
          }
        }
      }
    },
    "/configurations/units": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Configuration_Unit"
        ],
        "summary": "Get all Units.",
        "operationId": "getUnits",
        "responses": {
          "200": {
            "$ref": "#/responses/units"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Configuration_Unit"
        ],
        "summary": "Create a Unit.",
        "operationId": "createUnit",
        "parameters": [
          {
            "name": "Unit",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Unit"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/unit"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    },
    "/products": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Products"
        ],
        "summary": "Get all Products.",
        "operationId": "getProducts",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CurrentPage",
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PerPage",
            "name": "perPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/products"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Products"
        ],
        "summary": "Create a Product.",
        "operationId": "createProduct",
        "parameters": [
          {
            "name": "Product",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/product"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Products"
        ],
        "summary": "GET a Product by ID.",
        "operationId": "getProductById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/product"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Products"
        ],
        "summary": "Update a Product.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CurrentPage",
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "PerPage",
            "name": "perPage",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/product"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Products"
        ],
        "summary": "DELETE a Product by ID.",
        "operationId": "deleteProductById",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/product"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    },
    "/products/{productId}/prices": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Product_PriceUnit"
        ],
        "summary": "Get all PriceProductUnit.",
        "operationId": "getPriceProductUnits",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ProductID",
            "name": "productId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/pricePerUnits"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Product_PriceUnit"
        ],
        "summary": "Create a Price for Product Per Unit.",
        "operationId": "createPriceProductUnit",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ProductID",
            "name": "productId",
            "in": "path",
            "required": true
          },
          {
            "name": "PriceProductUnit",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PriceProductUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/pricePerUnit"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    },
    "/products/{productId}/{unitId}/prices": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Product_PriceUnit"
        ],
        "summary": "Get a PriceProductUnit.",
        "operationId": "getPriceProductUnit",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "UnitID",
            "name": "unitId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ProductID",
            "name": "productId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/pricePerUnit"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    },
    "/role": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Get All Roles",
        "operationId": "getRoles",
        "responses": {
          "200": {
            "$ref": "#/responses/roles"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Roles"
        ],
        "summary": "Create New Role",
        "operationId": "createRole",
        "parameters": [
          {
            "name": "Role",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/role"
          },
          "422": {
            "$ref": "#/responses/dataAlreadyExisted"
          }
        }
      }
    },
    "/stocks": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Stocks"
        ],
        "summary": "Get all Stocks",
        "operationId": "getAllStocks",
        "responses": {
          "200": {
            "$ref": "#/responses/stocks"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Stocks"
        ],
        "summary": "Create a Stock",
        "operationId": "createStock",
        "parameters": [
          {
            "name": "Stock",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Stock"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/stock"
          }
        }
      }
    },
    "/stocks/{id}": {
      "put": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Stocks"
        ],
        "summary": "Update a Stock by id",
        "operationId": "updateStockById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/stock"
          }
        }
      },
      "delete": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Stocks"
        ],
        "summary": "Delete a Stock by id",
        "operationId": "deleteStockById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/stock"
          }
        }
      }
    },
    "/stocks/{stockId}/records": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Stock_Records"
        ],
        "summary": "Get all Record of a Stock",
        "operationId": "getAllRecords",
        "responses": {
          "200": {
            "$ref": "#/responses/stockRecords"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Stock_Records"
        ],
        "summary": "Create a record for a Stock",
        "operationId": "createRecord",
        "responses": {
          "200": {
            "$ref": "#/responses/stockRecord"
          }
        }
      }
    },
    "/suppliers": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Supplier"
        ],
        "summary": "Get All Suppliers",
        "operationId": "getSuppliers",
        "responses": {
          "200": {
            "$ref": "#/responses/suppliers"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Supplier"
        ],
        "summary": "Add a Supplier",
        "operationId": "createSupplier",
        "parameters": [
          {
            "name": "Supplier",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/supplier"
          }
        }
      }
    },
    "/supplies": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Supplies"
        ],
        "summary": "Get all Supply",
        "operationId": "getAllSupply",
        "responses": {
          "200": {
            "$ref": "#/responses/supplies"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Supplies"
        ],
        "summary": "Create a Supply",
        "operationId": "createSupply",
        "parameters": [
          {
            "x-go-name": "Supply",
            "name": "supply",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Supply"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/supply"
          }
        }
      }
    },
    "/supplies/{supplyId}/payments": {
      "get": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Supply_Payments"
        ],
        "summary": "Get all Payments",
        "operationId": "getPayments",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SupplyID",
            "name": "supplyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/payments"
          }
        }
      },
      "post": {
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Supply_Payments"
        ],
        "summary": "Create a Payment",
        "operationId": "createPayment",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SupplyID",
            "name": "supplyId",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Payment",
            "name": "payment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/payment"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Lists all users.",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/users"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Consumes;\napplication/json",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Get User by id.",
        "operationId": "getUserById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/user"
          },
          "401": {
            "$ref": "#/responses/notAuthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "Auth": {
      "description": "Auth represents the Authentication Model for this application",
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "access_token": {
          "description": "accesstoken (jwt) expired (1 hours)",
          "type": "string",
          "x-go-name": "AcessToken",
          "readOnly": true
        },
        "email": {
          "description": "email for auth",
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "id for user",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "password": {
          "description": "password for auth",
          "type": "string",
          "x-go-name": "Password"
        },
        "refresh_token": {
          "description": "refreshtoken (jwt) expired (15 days)",
          "type": "string",
          "x-go-name": "RefreshToken",
          "readOnly": true
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Branch": {
      "description": "Branch is a model bro",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "branch": {
          "type": "string",
          "x-go-name": "Branch"
        },
        "date_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "description": "the dateUpdated for the product",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Payment": {
      "type": "object",
      "title": "Payment :",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double",
          "x-go-name": "Amount"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "supply": {
          "$ref": "#/definitions/Supply"
        },
        "supply_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SupplyID"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "PriceProductUnit": {
      "description": "PriceProductUnit : model for bridge between product and price to determine the price for the unit\nswagger: model",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "readOnly": true
        },
        "price": {
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "product_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProductID"
        },
        "unit": {
          "$ref": "#/definitions/Unit"
        },
        "unit_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnitID"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Product": {
      "description": "Product represents the product for this application",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "the dateCreated for the product",
          "type": "number",
          "format": "float",
          "x-go-name": "CostPrice"
        },
        "date_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "description": "the dateUpdated for the product",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "description": "the id for the product",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "product": {
          "description": "the name for the product",
          "type": "string",
          "x-go-name": "Product"
        },
        "sale_price": {
          "type": "number",
          "format": "float",
          "x-go-name": "SalePrice"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Role": {
      "description": "Role : model for the role existes in the system",
      "type": "object",
      "properties": {
        "id": {
          "description": "id for role",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "key": {
          "description": "the role",
          "type": "string",
          "x-go-name": "Key"
        },
        "text": {
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "ShiftWork": {
      "type": "object",
      "properties": {
        "date_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "shift": {
          "type": "string",
          "x-go-name": "Shift"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Stock": {
      "description": "Stock : model",
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/Branch"
        },
        "branch_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BranchID"
        },
        "date_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "description": "the dateUpdated for the product",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "shift_work": {
          "$ref": "#/definitions/ShiftWork"
        },
        "shift_work_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ShiftWorkID"
        },
        "stock_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StockDate"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "user_id": {
          "description": "ProductID int64     `json:\"product_id\"`\nUnitID    int64 `json:\"unit_id\"`\nSupplierID int64    `json:\"supplier_id\"`\nSupplier   Supplier `pg:\"fk:supplier_id\" json:\"supplier\"`",
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "StockProduct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "product_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProductID"
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        },
        "stock_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StockID"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "StockRecord": {
      "type": "object",
      "title": "StockRecord :",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "stock_in": {
          "description": "StockTypeID  int64         `json:\"stock_type_id\"`",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StockIn",
          "readOnly": true
        },
        "stock_out": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StockBalance"
        },
        "stock_product": {
          "$ref": "#/definitions/StockProduct"
        },
        "stock_product_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StockProductID"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "StockType": {
      "description": "StockType : BALANCE | IN\nswagger: model",
      "type": "object",
      "properties": {
        "date_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "description": "the dateUpdated for the product",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Supplier": {
      "description": "Supplier represents the supplier for dz",
      "type": "object",
      "properties": {
        "address": {
          "description": "address of org or person",
          "type": "string",
          "x-go-name": "Address"
        },
        "company": {
          "description": "name of org or person",
          "type": "string",
          "x-go-name": "Company"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "description": "the id",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "person_in_charge": {
          "type": "string",
          "x-go-name": "PersonInCharge"
        },
        "phone_no": {
          "type": "string",
          "x-go-name": "PhoneNo"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Supply": {
      "type": "object",
      "title": "Supply :",
      "properties": {
        "accepted_by": {
          "$ref": "#/definitions/User"
        },
        "accepted_by_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AcceptedByID"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "requested_by": {
          "$ref": "#/definitions/User"
        },
        "requested_by_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RequestedByID"
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        },
        "stock_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StockID"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "supplier_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SupplierID"
        },
        "supply_unit": {
          "$ref": "#/definitions/SupplyUnit"
        },
        "supply_unit_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SupplyUnitID"
        },
        "total_amount": {
          "type": "number",
          "format": "double",
          "x-go-name": "TotalAmount"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "SupplyUnit": {
      "type": "object",
      "title": "SupplyUnit :",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Amount"
        },
        "date_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "unit": {
          "$ref": "#/definitions/Unit"
        },
        "unit_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnitID"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "Unit": {
      "description": "Unit represents the product unit for this application",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    },
    "User": {
      "description": "User represents the product for this application",
      "type": "object",
      "required": [
        "last_name"
      ],
      "properties": {
        "date_created": {
          "description": "the dateCreated for this user",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateCreated"
        },
        "date_updated": {
          "description": "the dateUpdated for this user",
          "type": "string",
          "format": "date-time",
          "x-go-name": "DateUpdated"
        },
        "id": {
          "description": "the id for this user",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "readOnly": true
        },
        "last_name": {
          "description": "the last name for this user",
          "type": "string",
          "minLength": 3,
          "x-go-name": "LastName"
        },
        "role_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoleID"
        },
        "salary": {
          "description": "the salary for this user",
          "type": "number",
          "format": "double",
          "x-go-name": "Salary"
        }
      },
      "x-go-package": "github.com/aiman-zaki/go_dz_http/models"
    }
  },
  "responses": {
    "branch": {
      "description": "BranchResponse : List a branch",
      "schema": {
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/definitions/Branch"
          },
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "branches": {
      "description": "BranchesResponse : List all branches",
      "schema": {
        "type": "object",
        "properties": {
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Branch"
            },
            "x-go-name": "Branch"
          },
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "dataAlreadyExisted": {
      "description": "DataAlreadyExisted :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "errorNotFound": {
      "description": "ErrorNotFound :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "invalidCredential": {
      "description": "InvalidCredential :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the error message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notAuthorized": {
      "description": "NotAuthorized :",
      "schema": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          }
        }
      }
    },
    "payment": {
      "description": "PaymentResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "payment": {
            "$ref": "#/definitions/Payment"
          }
        }
      }
    },
    "payments": {
      "description": "PaymentsResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Payment"
            },
            "x-go-name": "Payment"
          }
        }
      }
    },
    "pricePerUnit": {
      "description": "PriceProductUnitsResponse : List a products",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "price": {
            "$ref": "#/definitions/PriceProductUnit"
          }
        }
      }
    },
    "pricePerUnits": {
      "description": "PriceProductUnitResponse : List all products",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PriceProductUnit"
            },
            "x-go-name": "PriceProductUnit"
          }
        }
      }
    },
    "product": {
      "description": "ProductResponse : List a product",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "product": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "products": {
      "description": "ProductsResponse : List all products",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Product"
            },
            "x-go-name": "Product"
          }
        }
      }
    },
    "role": {
      "description": "RoleResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "role": {
            "$ref": "#/definitions/Role"
          }
        }
      }
    },
    "roles": {
      "description": "RolesResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Role"
            },
            "x-go-name": "Role"
          }
        }
      }
    },
    "stock": {
      "description": "StockResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "stock": {
            "$ref": "#/definitions/Stock"
          }
        }
      }
    },
    "stockRecord": {
      "description": "StockRecordResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "record_stock": {
            "$ref": "#/definitions/StockRecord"
          }
        }
      },
      "headers": {
        "Body": {}
      }
    },
    "stockRecords": {
      "description": "StockRecordsResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "record_stocks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StockRecord"
            },
            "x-go-name": "RecordStock"
          }
        }
      },
      "headers": {
        "Body": {}
      }
    },
    "stockStatus": {
      "description": "StockStatusResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "stock_status": {
            "$ref": "#/definitions/StockType"
          }
        }
      },
      "headers": {
        "Body": {}
      }
    },
    "stockStatuses": {
      "description": "StockStatusesResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "stock_statuses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StockType"
            },
            "x-go-name": "StockStatuses"
          }
        }
      },
      "headers": {
        "Body": {}
      }
    },
    "stocks": {
      "description": "StocksResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Stock"
            },
            "x-go-name": "Stock"
          }
        }
      }
    },
    "supplier": {
      "description": "SupplierResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "supplier": {
            "$ref": "#/definitions/Supplier"
          }
        }
      }
    },
    "suppliers": {
      "description": "SuppliersResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "suppliers": {
            "description": "the credential given once successfully logined",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Supplier"
            },
            "x-go-name": "Supplier"
          }
        }
      }
    },
    "supplies": {
      "description": "SuppliesResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "supplies": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Supply"
            },
            "x-go-name": "Supply"
          }
        }
      }
    },
    "supply": {
      "description": "SupplyResponse :",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "supply": {
            "$ref": "#/definitions/Supply"
          }
        }
      }
    },
    "unit": {
      "description": "UnitResponse : List a Unit",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "unit": {
            "$ref": "#/definitions/Unit"
          }
        }
      }
    },
    "units": {
      "description": "UnitsResponse : List a Unit",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Unit"
            },
            "x-go-name": "Unit"
          }
        }
      }
    },
    "user": {
      "description": "UserResponse : List all users",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "user": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "users": {
      "description": "UsersResponse : List all users",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            },
            "x-go-name": "User"
          }
        }
      }
    },
    "validCredential": {
      "description": "ValidCredential :",
      "schema": {
        "type": "object",
        "properties": {
          "auth": {
            "$ref": "#/definitions/Auth"
          },
          "message": {
            "description": "the success message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "flow": "implicit"
    }
  },
  "security": [
    {
      "Bearer": [
        "[]"
      ]
    }
  ]
}